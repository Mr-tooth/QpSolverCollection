name: CI of QpSolverCollection

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:

  clang-format:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - name: Install clang-format-10
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install clang-format-10
      - name: Run clang-format-check
        run: |
          ./.clang-format-check.sh

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, RelWithDebInfo]
    runs-on: ubuntu-18.04
    env:
      ROS_DISTRO: melodic
    steps:
      - name: Install ROS
        run: |
          set -e
          set -x
          sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
          wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
          sudo apt-get update -qq
          sudo apt-get install -qq ros-${ROS_DISTRO}-ros-base python-catkin-tools python-rosdep doxygen graphviz
      - name: Setup catkin workspace
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/catkin_ws/src/
          cd ${GITHUB_WORKSPACE}/catkin_ws
          . /opt/ros/${ROS_DISTRO}/setup.bash
          catkin init
          catkin build --limit-status-rate 0.1
      - name: Checkout repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: catkin_ws/src/QpSolverCollection
      - name: Rosdep install
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws
          . devel/setup.bash
          sudo rosdep init
          rosdep update
          rosdep install -y -r --from-paths src --ignore-src
      #### [Start] Install QP solvers ####
      - name: Checkout eigen-qld
        uses: actions/checkout@v2
        with:
          repository: jrl-umi3218/eigen-qld
          submodules: recursive
          path: eigen-qld
      - name: Install eigen-qld
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/eigen-qld
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DBUILD_TESTING=OFF -DPYTHON_BINDING=OFF -DINSTALL_DOCUMENTATION=OFF
          make && sudo make install
      - name: Checkout eigen-quadprog
        uses: actions/checkout@v2
        with:
          repository: jrl-umi3218/eigen-quadprog
          submodules: recursive
          path: eigen-quadprog
      - name: Install eigen-quadprog
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/eigen-quadprog
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DBUILD_TESTING=OFF -DINSTALL_DOCUMENTATION=OFF
          make && sudo make install
      - name: Checkout jrl-qp
        uses: actions/checkout@v2
        with:
          repository: jrl-umi3218/jrl-qp
          ref: topic/BlockStructure
          submodules: recursive
          path: jrl-qp
      - name: Install jrl-qp
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/jrl-qp
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DBUILD_TESTING=OFF -DBUILD_BENCHMARKS=OFF -DINSTALL_DOCUMENTATION=OFF
          make && sudo make install
      - name: Checkout qpOASES
        uses: actions/checkout@v2
        with:
          repository: coin-or/qpOASES
          submodules: recursive
          path: qpOASES
      - name: Install qpOASES
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/qpOASES
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DBUILD_SHARED_LIBS=ON -DQPOASES_BUILD_EXAMPLES=OFF
          make && sudo make install
      - name: Checkout osqp
        uses: actions/checkout@v2
        with:
          repository: osqp/osqp
          submodules: recursive
          path: osqp
      - name: Install osqp
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/osqp
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          make && sudo make install
      - name: Checkout osqp-eigen
        uses: actions/checkout@v2
        with:
          repository: robotology/osqp-eigen
          submodules: recursive
          path: osqp-eigen
      - name: Install osqp-eigen
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/osqp-eigen
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
          make && sudo make install
      - name: Checkout nasoq
        uses: actions/checkout@v2
        with:
          repository: mmurooka/nasoq
          ref: cmake-install
          submodules: recursive
          path: nasoq
      - name: Install nasoq
        run: |
          set -x
          set -e
          sudo apt-get install -qq libmetis-dev
          cd ${GITHUB_WORKSPACE}/nasoq
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DNASOQ_BLAS_BACKEND=OpenBLAS -DNASOQ_USE_CLAPACK=ON \
          -DNASOQ_BUILD_CLI=OFF -DNASOQ_BUILD_EXAMPLES=OFF -DNASOQ_BUILD_TESTS=OFF -DNASOQ_BUILD_DOCS=OFF
          make && sudo make install
      - name: Checkout eigen-lssol
        run: |
          git clone "https://m-murooka_at_aist_go_jp:$GITLAB_TOKEN@gite.lirmm.fr/multi-contact/eigen-lssol" \
          --recursive ${GITHUB_WORKSPACE}/eigen-lssol
        env:
          GITLAB_TOKEN : ${{ secrets.GITLAB_TOKEN }}
      - name: Install eigen-lssol
        run: |
          set -x
          set -e
          cd ${GITHUB_WORKSPACE}/eigen-lssol
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DBUILD_TESTING=OFF -DPYTHON_BINDING=OFF -DINSTALL_DOCUMENTATION=OFF
          make && sudo make install
      #### [End] Install QP solvers ####
      - name: Catkin build
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws
          . devel/setup.bash
          catkin build --limit-status-rate 0.1 -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DDEFAULT_ENABLE_ALL=ON -DINSTALL_DOCUMENTATION=ON
      - name: Run tests
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws
          . devel/setup.bash
          catkin build --limit-status-rate 0.1 --catkin-make-args run_tests -- qp_solver_collection --no-deps
          catkin_test_results --verbose --all build
      - name: Upload documentation
        # Only run on master branch and for one configuration
        if: matrix.build-type == 'RelWithDebInfo' && github.ref == 'refs/heads/master'
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws/src/QpSolverCollection
          git config --global user.name "Masaki Murooka"
          git config --global user.email "m-murooka@aist.go.jp"
          git remote set-url origin "https://mmurooka:${{ secrets.CI_TOKEN }}@github.com/isri-aist/QpSolverCollection"
          git fetch --depth=1 origin gh-pages:gh-pages
          git checkout --quiet gh-pages
          rm -rf doxygen/
          cp -r ${GITHUB_WORKSPACE}/catkin_ws/build/qp_solver_collection/doc/html/ doxygen
          git add doxygen
          git_status=`git status -s`
          if test -n "$git_status"; then
            git commit --quiet -m "Update Doxygen HTML files from commit ${{ github.sha }}"
            git push origin gh-pages
          else
            echo "Github pages documentation is already up-to-date."
          fi
